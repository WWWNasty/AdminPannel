{"version":3,"sources":["../../../ReactApp/src/MyMultipleSelect.tsx"],"names":["MyMultipleSelect","props","getStyles","name","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","useStyles","makeStyles","formControl","margin","spacing","chips","display","flexWrap","chip","noLabel","marginTop","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","classes","control","useFormContext","isValid","form","getValues","length","type","setError","message","selectName","selectEmpty","selected","selectOptions","flatMap","option","questionaryObjects","filter","id","map","item","object"],"mappings":"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","sourcesContent":["interface QuestionaryObjecTypes extends SelectOption {\r\n    typeObjectProperties: TypeObjectProperties[];\r\n    questionaryObjects: SelectOption[];\r\n    companyId: number;\r\n}\r\n\r\nconst MyMultipleSelect = (props: { selectOptions: QuestionaryObjecTypes[], selectedValue: any, selectName: string, form: any }) => {\r\n\r\n    function getStyles(name, personName, theme) {\r\n        return {\r\n            fontWeight:\r\n                personName.indexOf(name) === -1\r\n                    ? theme.typography.fontWeightRegular\r\n                    : theme.typography.fontWeightMedium,\r\n        };\r\n    }\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        formControl: {\r\n            margin: theme.spacing(0),\r\n            // minWidth: 120,\r\n            // maxWidth: 300,\r\n        },\r\n        chips: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n        },\r\n        chip: {\r\n            margin: 2,\r\n        },\r\n        noLabel: {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    }));\r\n\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                 maxHeight: 700,\r\n                 //ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n                // width: 250,\r\n            },\r\n        },\r\n    };\r\n    const classes = useStyles();\r\n    const {control} = useFormContext();\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={`${classes.formControl} col-md-3`}>\r\n                <ReactHookFormSelect\r\n                    labelId=\"demo-mutiple-chip-label\"\r\n                    id=\"demo-mutiple-chip\" \r\n                    multiple\r\n                    validate={ () => {\r\n                        const isValid = props.form.getValues('objectsIdToChangeType')?.length > 0;\r\n                        const type = 'oneOrMoreRequired';\r\n\r\n                        if(!isValid)\r\n                            props.form.setError('objectsIdToChangeType', {type, message: 'Выберите объекты для анкеты!'});\r\n                        \r\n                        return isValid;\r\n                    }}\r\n                    name=\"objectsIdToChangeType\"\r\n                    label={props.selectName}\r\n                    defaultValue={[]}\r\n                    className={classes.selectEmpty}\r\n                    control={control}\r\n                    input={<Input id=\"select-multiple-chip\"/>}\r\n                    renderValue={(selected) => (\r\n                        <div className={classes.chips}>\r\n                            {props.selectOptions\r\n                                .flatMap(option => option.questionaryObjects)\r\n                                .filter(option => selected.indexOf(option.id) > -1)\r\n                                .map((option) =>\r\n                                    <Chip key={option.id} label={option.name} className={classes.chip}/>\r\n                                )}\r\n                        </div>\r\n                    )}\r\n                    MenuProps={MenuProps}>\r\n\r\n                    {props.selectOptions?.map(item => [\r\n                        <ListSubheader>{item.name}</ListSubheader>,\r\n                        item.questionaryObjects?.map((object) =>\r\n                            <MenuItem key={object.id} value={object.id}>\r\n                                <Checkbox />\r\n                                <ListItemText primary={object.name}/>\r\n                            </MenuItem>)\r\n                    ])}                \r\n                </ReactHookFormSelect>\r\n                \r\n                {/*<InputLabel id=\"demo-mutiple-chip-label\">{props.selectName}</InputLabel>*/}\r\n                {/*<Select*/}\r\n                {/*    labelId=\"demo-mutiple-chip-label\"*/}\r\n                {/*    id=\"demo-mutiple-chip\"*/}\r\n                {/*    multiple*/}\r\n                {/*    value={props.selectedValue}*/}\r\n                {/*    onChange={handleChange}*/}\r\n                {/*    input={<Input id=\"select-multiple-chip\"/>}*/}\r\n                {/*    renderValue={(selected) => (*/}\r\n                {/*        <div className={classes.chips}>*/}\r\n                {/*            {props.selectOptions*/}\r\n                {/*                .flatMap(option => option.questionaryObjects)*/}\r\n                {/*                .filter(option => selected.indexOf(option.id) > -1)*/}\r\n                {/*                .map((option) =>*/}\r\n                {/*                    <Chip key={option.id} label={option.name} className={classes.chip}/>*/}\r\n                {/*                )}*/}\r\n                {/*        </div>*/}\r\n                {/*    )}*/}\r\n                {/*    MenuProps={MenuProps}>*/}\r\n                \r\n                {/*    {props.selectOptions?.map(item => [*/}\r\n                {/*        <ListSubheader>{item.name}</ListSubheader>,*/}\r\n                {/*        item.questionaryObjects.map((object) =>*/}\r\n                {/*            <MenuItem key={object.id} value={object.id}>*/}\r\n                {/*                <Checkbox />*/}\r\n                {/*                <ListItemText primary={object.name}/>*/}\r\n                {/*            </MenuItem>)*/}\r\n                {/*    ])}*/}\r\n                {/*    */}\r\n                {/*</Select>*/}\r\n                \r\n            </FormControl>\r\n        </div>\r\n    );\r\n}"],"file":"MyMultipleSelect.js"}