{"version":3,"sources":["../../../ReactApp/src/MyMultipleSelect.tsx"],"names":["MyMultipleSelect","props","form","useFormContext","getStyles","name","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","useStyles","makeStyles","formControl","margin","spacing","noLabel","marginTop","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","classes","control","isValid","getValues","length","type","setError","message","selectName","selectEmpty","selectOptions","selected","flatMap","option","questionaryObjects","filter","id","map","join","item","object","watch"],"mappings":"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","sourcesContent":["interface QuestionaryObjecTypes extends SelectOption {\r\n    typeObjectProperties: TypeObjectProperties[];\r\n    questionaryObjects: SelectOption[];\r\n    companyId: number;\r\n}\r\n\r\nconst MyMultipleSelect = (props: { selectOptions: QuestionaryObjecTypes[], selectedValue: any, selectName: string, form: any }) => {\r\n    const form = useFormContext();\r\n    function getStyles(name, personName, theme) {\r\n        return {\r\n            fontWeight:\r\n                personName.indexOf(name) === -1\r\n                    ? theme.typography.fontWeightRegular\r\n                    : theme.typography.fontWeightMedium,\r\n        };\r\n    }\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        formControl: {\r\n            margin: theme.spacing(0),\r\n            // minWidth: 120,\r\n            // maxWidth: 300,\r\n        },\r\n        noLabel: {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    }));\r\n\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                 maxHeight: 700,\r\n                 //ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n                // width: 250,\r\n            },\r\n        },\r\n    };\r\n    const classes = useStyles();\r\n    const {control} = useFormContext();\r\n  \r\n    return (\r\n        <div>\r\n            <FormControl className={`${classes.formControl} col-md-3`}>\r\n                <ReactHookFormSelect\r\n                    labelId=\"demo-mutiple-checkbox-label\"\r\n                    id=\"demo-mutiple-checkbox\" \r\n                    multiple\r\n                    validate={ () => {\r\n                        const isValid = props.form.getValues('objectsIdToChangeType')?.length > 0;\r\n                        const type = 'oneOrMoreRequired';\r\n\r\n                        if(!isValid)\r\n                            props.form.setError('objectsIdToChangeType', {type, message: 'Выберите объекты для анкеты!'});\r\n                        \r\n                          return isValid;\r\n                    }}\r\n                    name=\"objectsIdToChangeType\"\r\n                    label={props.selectName}\r\n                    defaultValue={[]}\r\n                    className={classes.selectEmpty}\r\n                    control={control}\r\n                    input={<Input/>}\r\n                    selectOptions={props.selectOptions}\r\n                    renderValue={\r\n                        (selected) => (\r\n                            props.selectOptions\r\n                                .flatMap(option => option.questionaryObjects)\r\n                                .filter(option => selected.indexOf(option?.id) > -1)\r\n                                .map((option) => option.name\r\n                                ).join(', ')\r\n                    )}\r\n                    MenuProps={MenuProps}>\r\n\r\n                    {props.selectOptions?.map(item => [ item.questionaryObjects?.length?\r\n                        <ListSubheader>{item.name}</ListSubheader> : null,\r\n                        item.questionaryObjects?.map((object) =>\r\n                            <MenuItem key={object.id} value={object.id}>\r\n                                <Checkbox color=\"primary\"\r\n                                          checked={form.watch('objectsIdToChangeType')?.indexOf(object.id) > -1}/>\r\n                                <ListItemText primary={object.name}/>\r\n                            </MenuItem>)\r\n                    ])}                \r\n                </ReactHookFormSelect>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}"],"file":"MyMultipleSelect.js"}