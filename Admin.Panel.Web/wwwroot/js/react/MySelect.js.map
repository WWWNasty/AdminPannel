{"version":3,"sources":["../../../ReactApp/src/MySelect.tsx"],"names":["ReactHookFormSelect","name","label","control","defaultValue","children","props","errors","useFormContext","labelId","type","renderValue","multiple","required","minLength","validate","message","MySelect","classes","useStyles","form","formControl","nameSwlect","selectedValue","selectEmpty","selectOptions","map","item","id"],"mappings":";;AAKA,MAAMA,mBAAmB,GAAG,CAAC;AACIC,EAAAA,IADJ;AAEIC,EAAAA,KAFJ;AAGIC,EAAAA,OAHJ;AAIIC,EAAAA,YAJJ;AAKIC,EAAAA,QALJ;AAMI,KAAGC;AANP,CAAD,KAOO;AAC/B,QAAM;AAACC,IAAAA;AAAD,MAAWC,cAAc,EAA/B;AACA,QAAMC,OAAO,GAAI,GAAER,IAAK,QAAxB;AACA,sBACI,oBAAC,WAAD,eAAiBK,KAAjB;AAAwB,IAAA,KAAK,EAAEC,MAAM,CAACN,IAAD,CAAN,EAAcS;AAA7C,mBACI,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAED;AAAhB,KAA0BP,KAA1B,CADJ,eAEI,oBAAC,UAAD;AACI,IAAA,EAAE,eACE,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAEI,KAAK,CAACK,WAA3B;AAAwC,MAAA,QAAQ,EAAEL,KAAK,CAACM,QAAxD;AAAkE,MAAA,OAAO,EAAEH,OAA3E;AAAoF,MAAA,KAAK,EAAEP;AAA3F,OACKG,QADL,CAFR;AAMI,IAAA,KAAK,EAAG;AAACQ,MAAAA,QAAQ,EAAEP,KAAK,CAACO,QAAjB;AAA2BC,MAAAA,SAAS,EAAER,KAAK,CAACQ,SAA5C;AAAuDC,MAAAA,QAAQ,EAAET,KAAK,CAACS;AAAvE,KANZ;AAOI,IAAA,IAAI,EAAEd,IAPV;AAQI,IAAA,OAAO,EAAEE,OARb;AASI,IAAA,YAAY,EAAEC;AATlB,IAFJ,eAaI,oBAAC,cAAD,QAAiBG,MAAM,CAACN,IAAD,CAAN,EAAce,OAA/B,CAbJ,CADJ;AAiBH,CA3BD;;AA6BA,MAAMC,QAAQ,GAAIX,KAAD,IAAW;AACxB,QAAMY,OAAO,GAAGC,SAAS,EAAzB;AACA,QAAM;AAAChB,IAAAA;AAAD,MAAYG,KAAK,CAACc,IAAN,IAAcZ,cAAc,EAA9C;AAEA,sBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAG,GAAEU,OAAO,CAACG,WAAY;AAA/C,kBACI,oBAAC,mBAAD;AACI,IAAA,QAAQ,EAAEf,KAAK,CAACO,QADpB;AAEI,IAAA,IAAI,EAAEP,KAAK,CAACL,IAFhB;AAGI,IAAA,KAAK,EAAEK,KAAK,CAACgB,UAHjB;AAII,IAAA,YAAY,EAAEhB,KAAK,CAACiB,aAJxB;AAKI,IAAA,SAAS,EAAEL,OAAO,CAACM,WALvB;AAMI,IAAA,OAAO,EAAErB;AANb,KAOKG,KAAK,CAACmB,aAAN,EAAqBC,GAArB,CAA0BC,IAAD,iBAAU,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,IAAI,CAACC;AAAtB,KAA2BD,IAAI,CAAC1B,IAAhC,CAAnC,KAAwF,EAP7F,CADJ,CADJ;AAaH,CAjBD","sourcesContent":["interface SelectOption {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nconst ReactHookFormSelect = ({\r\n                                 name,\r\n                                 label,\r\n                                 control,\r\n                                 defaultValue,\r\n                                 children,\r\n                                 ...props\r\n                             }) => {\r\n    const {errors} = useFormContext();\r\n    const labelId = `${name}-label`;\r\n    return (\r\n        <FormControl {...props} error={errors[name]?.type}>\r\n            <InputLabel id={labelId}>{label}</InputLabel>\r\n            <Controller\r\n                as={\r\n                    <Select renderValue={props.renderValue} multiple={props.multiple} labelId={labelId} label={label}>\r\n                        {children}\r\n                    </Select>\r\n                }\r\n                rules={ {required: props.required, minLength: props.minLength, validate: props.validate}} \r\n                name={name}\r\n                control={control}\r\n                defaultValue={defaultValue}\r\n            />\r\n            <FormHelperText>{errors[name]?.message}</FormHelperText>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nconst MySelect = (props) => {\r\n    const classes = useStyles();\r\n    const {control} = props.form ?? useFormContext();\r\n    \r\n    return (\r\n        <FormControl className={`${classes.formControl} col-md-3 mr-3`}>\r\n            <ReactHookFormSelect\r\n                required={props.required}\r\n                name={props.name}\r\n                label={props.nameSwlect}\r\n                defaultValue={props.selectedValue}\r\n                className={classes.selectEmpty}\r\n                control={control}>\r\n                {props.selectOptions?.map((item) => <MenuItem value={item.id}>{item.name}</MenuItem>) ?? []}\r\n            </ReactHookFormSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n"],"file":"MySelect.js"}