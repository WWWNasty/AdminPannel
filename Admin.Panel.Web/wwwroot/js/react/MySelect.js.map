{"version":3,"sources":["../../../ReactApp/src/MySelect.tsx"],"names":["ReactHookFormSelect","name","label","control","defaultValue","children","props","errors","useFormContext","labelId","error","type","onChange","value","renderValue","multiple","event","required","minLength","validate","errorMessage","message","MySelect","classes","useStyles","form","formControl","nameSwlect","selectedValue","selectEmpty","selectOptions","map","item","id"],"mappings":";;AAKA,MAAMA,mBAAmB,GAAG,CAAC;AACIC,EAAAA,IADJ;AAEIC,EAAAA,KAFJ;AAGIC,EAAAA,OAHJ;AAIIC,EAAAA,YAJJ;AAKIC,EAAAA,QALJ;AAMI,KAAGC;AANP,CAAD,KAOO;AAE/B,QAAM;AAACC,IAAAA;AAAD,MAAWC,cAAc,EAA/B;AACA,QAAMC,OAAO,GAAI,GAAER,IAAK,QAAxB;AACA,sBACI,oBAAC,WAAD,eAAiBK,KAAjB;AAAwB,IAAA,KAAK,EAAEA,KAAK,CAACI,KAAN,IAAeH,MAAM,CAACN,IAAD,CAAN,EAAcU;AAA5D,mBACI,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAEF;AAAhB,KAA0BP,KAA1B,CADJ,eAEI,oBAAC,UAAD;AACI,IAAA,MAAM,EAAE,CAAC;AAACU,MAAAA,QAAD;AAAWC,MAAAA,KAAX;AAAkBZ,MAAAA;AAAlB,KAAD,kBAA6B,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAEK,KAAK,CAACQ,WAA3B;AACQ,MAAA,QAAQ,EAAER,KAAK,CAACS,QADxB;AAEQ,MAAA,OAAO,EAAEN,OAFjB;AAGQ,MAAA,KAAK,EAAEI,KAHf;AAIQ,MAAA,IAAI,EAAEZ,IAJd;AAKQ,MAAA,KAAK,EAAEC,KALf;AAMQ,MAAA,QAAQ,EAAEc,KAAK,IAAI;AACfJ,QAAAA,QAAQ,CAACI,KAAD,CAAR;AACAV,QAAAA,KAAK,CAACM,QAAN,CAAeI,KAAf;AACH;AATT,OAUhCX,QAVgC,CADzC;AAaI,IAAA,KAAK,EAAE;AAACY,MAAAA,QAAQ,EAAEX,KAAK,CAACW,QAAjB;AAA2BC,MAAAA,SAAS,EAAEZ,KAAK,CAACY,SAA5C;AAAuDC,MAAAA,QAAQ,EAAEb,KAAK,CAACa;AAAvE,KAbX;AAcI,IAAA,IAAI,EAAElB,IAdV;AAeI,IAAA,OAAO,EAAEE,OAfb;AAgBI,IAAA,YAAY,EAAEC;AAhBlB,IAFJ,eAoBI,oBAAC,cAAD,QAAiBE,KAAK,CAACc,YAAN,IAAsBb,MAAM,CAACN,IAAD,CAAN,EAAcoB,OAArD,CApBJ,CADJ;AAwBH,CAnCD;;AAqCA,MAAMC,QAAQ,GAAIhB,KAAD,IAAW;AACxB,QAAMiB,OAAO,GAAGC,SAAS,EAAzB;AACA,QAAM;AAACrB,IAAAA;AAAD,MAAYG,KAAK,CAACmB,IAAN,IAAcjB,cAAc,EAA9C;AAEA,sBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAG,GAAEe,OAAO,CAACG,WAAY;AAA/C,kBACI,oBAAC,mBAAD,eACQpB,KADR;AAEI,IAAA,QAAQ,EAAEA,KAAK,CAACW,QAFpB;AAGI,IAAA,IAAI,EAAEX,KAAK,CAACL,IAHhB;AAII,IAAA,KAAK,EAAEK,KAAK,CAACqB,UAJjB;AAKI,IAAA,YAAY,EAAErB,KAAK,CAACsB,aALxB;AAMI,IAAA,QAAQ,EAAEtB,KAAK,CAACM,QANpB;AAOI,IAAA,SAAS,EAAEW,OAAO,CAACM,WAPvB;AAQI,IAAA,OAAO,EAAE1B;AARb,MASKG,KAAK,CAACwB,aAAN,EAAqBC,GAArB,CAA0BC,IAAD,iBAAU,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,IAAI,CAACC;AAAtB,KAA2BD,IAAI,CAAC/B,IAAhC,CAAnC,KAAwF,EAT7F,CADJ,CADJ;AAeH,CAnBD","sourcesContent":["interface SelectOption {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nconst ReactHookFormSelect = ({\r\n                                 name,\r\n                                 label,\r\n                                 control,\r\n                                 defaultValue,\r\n                                 children,\r\n                                 ...props\r\n                             }) => {\r\n\r\n    const {errors} = useFormContext();\r\n    const labelId = `${name}-label`;\r\n    return (\r\n        <FormControl {...props} error={props.error ?? errors[name]?.type}>\r\n            <InputLabel id={labelId}>{label}</InputLabel>\r\n            <Controller\r\n                render={({onChange, value, name}) => <Select renderValue={props.renderValue}\r\n                                                             multiple={props.multiple}\r\n                                                             labelId={labelId}\r\n                                                             value={value}\r\n                                                             name={name}\r\n                                                             label={label}\r\n                                                             onChange={event => {\r\n                                                                 onChange(event);\r\n                                                                 props.onChange(event);\r\n                                                             }}>\r\n                    {children}\r\n                </Select>}\r\n                rules={{required: props.required, minLength: props.minLength, validate: props.validate}}\r\n                name={name}\r\n                control={control}\r\n                defaultValue={defaultValue}\r\n            />\r\n            <FormHelperText>{props.errorMessage ?? errors[name]?.message}</FormHelperText>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nconst MySelect = (props) => {\r\n    const classes = useStyles();\r\n    const {control} = props.form ?? useFormContext();\r\n \r\n    return (\r\n        <FormControl className={`${classes.formControl} col-md-3 mr-3`}>\r\n            <ReactHookFormSelect\r\n                {...props}\r\n                required={props.required}\r\n                name={props.name}\r\n                label={props.nameSwlect}\r\n                defaultValue={props.selectedValue}\r\n                onChange={props.onChange}\r\n                className={classes.selectEmpty}\r\n                control={control}>\r\n                {props.selectOptions?.map((item) => <MenuItem value={item.id}>{item.name}</MenuItem>) ?? []}\r\n            </ReactHookFormSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n"],"file":"MySelect.js"}