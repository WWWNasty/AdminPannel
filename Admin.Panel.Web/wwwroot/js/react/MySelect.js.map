{"version":3,"sources":["../../../ReactApp/src/MySelect.tsx"],"names":["ReactHookFormSelect","name","label","control","defaultValue","children","props","errors","useFormContext","labelId","error","type","onChange","value","console","log","selectOptions","flatMap","option","questionaryObjects","filter","indexOf","id","map","join","renderValue","multiple","event","required","minLength","validate","errorMessage","message","MySelect","classes","useStyles","form","formControl","nameSwlect","selectedValue","selectEmpty","item"],"mappings":"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","sourcesContent":["interface SelectOption {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nconst ReactHookFormSelect = ({\r\n                                 name,\r\n                                 label,\r\n                                 control,\r\n                                 defaultValue,\r\n                                 children,\r\n                                 ...props\r\n                             }) => {\r\n\r\n    const {errors} = useFormContext();\r\n    const labelId = `${name}-label`;\r\n    return (\r\n        <FormControl {...props} error={props.error ?? errors[name]?.type}>\r\n            <InputLabel id={labelId}>{label}</InputLabel>\r\n            <Controller\r\n                render={({onChange, value, name}) =>\r\n                    <Tooltip title={(value) => {\r\n                        console.log(value);\r\n                        debugger;\r\n                        props.selectOptions\r\n                            .flatMap(option => option.questionaryObjects)\r\n                            .filter(option => value.indexOf(option?.id) > -1)\r\n                            .map((option) => option.name).join(', ')\r\n                    }}\r\n                             placement=\"bottom-start\">\r\n                        <Select renderValue={props.renderValue}\r\n                                multiple={props.multiple}\r\n                                labelId={labelId}\r\n                                value={value}\r\n                                name={name}\r\n                                label={label}\r\n                                onChange={event => {\r\n                                    onChange(event);\r\n\r\n                                    props?.onChange(event);\r\n                                }}>\r\n                            {children}\r\n                        </Select>\r\n                    </Tooltip>}\r\n                rules={{required: props.required, minLength: props.minLength, validate: props.validate}}\r\n                name={name}\r\n                control={control}\r\n                defaultValue={defaultValue}\r\n            />\r\n            <FormHelperText>{props.errorMessage ?? errors[name]?.message}</FormHelperText>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nconst MySelect = (props) => {\r\n    const classes = useStyles();\r\n    const {control} = props.form ?? useFormContext();\r\n\r\n    return (\r\n        <FormControl className={`${classes.formControl} col-md-3 mr-3`}>\r\n            <ReactHookFormSelect\r\n                {...props}\r\n                required={props.required}\r\n                name={props.name}\r\n                label={props.nameSwlect}\r\n                defaultValue={props.selectedValue? props.selectedValue: null}\r\n                onChange={props?.onChange}\r\n                className={classes.selectEmpty}\r\n                control={control}>\r\n                {props.selectOptions?.map((item) => <MenuItem value={item.id}>{item.name}</MenuItem>) ?? []}\r\n\r\n            </ReactHookFormSelect>\r\n\r\n        </FormControl>\r\n    );\r\n}\r\n"],"file":"MySelect.js"}