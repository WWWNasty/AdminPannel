{"version":3,"sources":["../../../ReactApp/src/DraggableComponent.tsx"],"names":["DraggableComponent","props","items","setItems","useState","indexes","setIndexes","React","counter","setCounter","addQuestion","prevIndexes","prevCounter","onDragEnd","result","destination","reorderedItems","reorder","source","index","provided","snapshot","innerRef","getListStyle","isDraggingOver","map","toString","id","placeholder","getItems","count","Array","from","length","v","k","primary","secondary","undefined","list","startIndex","endIndex","removed","splice","getItemStyle","isDragging","draggableStyle","background"],"mappings":"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","sourcesContent":["const DraggableComponent = (props) => {\r\n    const [items, setItems] = useState([]);\r\n    //\r\n    // React.useEffect(() => {\r\n    //     setItems(getItems(1))\r\n    // },[])\r\n\r\n    const [indexes, setIndexes] = React.useState([]);\r\n    const [counter, setCounter] = React.useState(0);\r\n\r\n    const addQuestion = () => {\r\n        \r\n        setIndexes(prevIndexes => [...prevIndexes, counter]);\r\n        setCounter(prevCounter => prevCounter + 1);\r\n    };\r\n    const onDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        const reorderedItems = reorder(\r\n            indexes,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n\r\n        setItems(reorderedItems);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <RootRef rootRef={provided.innerRef}>\r\n                            <List style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {indexes.map(index =>\r\n                                    <Draggable key={index} index={index} draggableId={index.toString()}>\r\n                                        {(provided, snapshot) =>\r\n                                            <DraggableCard provided={provided} snapshot={snapshot}\r\n                                                           item={{id: index}}\r\n                                                           index={index} setIndexes={setIndexes}\r\n                                                           setCounter={setCounter}/>\r\n                                        }\r\n                                    </Draggable>)\r\n\r\n                                }\r\n\r\n\r\n                                {provided.placeholder}\r\n                            </List>\r\n                        </RootRef>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div>\r\n                <IconButton onClick={addQuestion} color=\"primary\" aria-label=\"add\" className=\"mt-50 mb-50 ml-50\">\r\n                    <Icon>add</Icon>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n    Array.from({length: count}, (v, k) => k).map(k => ({\r\n        id: `item-${k}`,\r\n        primary: `item ${k}`,\r\n        secondary: k % 2 === 0 ? `Whatever for ${k}` : undefined\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n\r\n    ...(isDragging && {\r\n        background: \"rgb(235,235,235)\"\r\n    })\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    //background: isDraggingOver ? 'lightblue' : 'lightgrey'\r\n});"],"file":"DraggableComponent.js"}