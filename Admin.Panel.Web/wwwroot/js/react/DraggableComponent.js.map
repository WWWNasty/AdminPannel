{"version":3,"sources":["../../../ReactApp/src/DraggableComponent.tsx"],"names":["DraggableComponent","props","form","useFormContext","questionsFieldName","remove","append","move","fields","useFieldArray","control","name","keyName","onDragEnd","result","destination","source","index","handleNewQuestion","onSuccess","data","clearErrors","key","Math","random","questionText","canSkipQuestion","selectableAnswersListId","questionaryInputFieldTypeId","defaultAnswerId","questionaryAnswerOptions","handleSubmit","provided","snapshot","innerRef","getListStyle","isDraggingOver","map","question","toString","selectableAnswersLists","questionaryInputFieldTypes","selectableAnswers","placeholder","getItems","count","Array","from","length","v","k","id","primary","secondary","undefined","reorder","list","startIndex","endIndex","removed","splice","getItemStyle","isDragging","draggableStyle","background"],"mappings":"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","sourcesContent":["const DraggableComponent = (props) => {\r\n\r\n\r\n    const form = useFormContext();\r\n\r\n\r\n    const questionsFieldName = `questionaryQuestions`;\r\n\r\n    const {remove, append, move, fields} = useFieldArray({control: form.control, name: questionsFieldName, keyName: 'key'});\r\n\r\n    const onDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        move(result.source.index, result.destination.index);\r\n        \r\n        //form.setValue(`questionaryQuestions[${props.index}].sequenceOrder`, result.destination.index)\r\n    }\r\n    \r\n    const handleNewQuestion = () => {\r\n        const onSuccess = data => {\r\n            form.clearErrors();\r\n            append({\r\n                key: Math.random(),\r\n                questionText: '',\r\n                canSkipQuestion: false,\r\n                selectableAnswersListId: null,\r\n                questionaryInputFieldTypeId: null,\r\n                defaultAnswerId: null,\r\n                questionaryAnswerOptions: []\r\n            })\r\n        }\r\n        form.handleSubmit(onSuccess)();\r\n    };\r\n    return (\r\n        <div>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <RootRef rootRef={provided.innerRef}>\r\n                            <List style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {fields.map((question, index) =>\r\n                                    <Draggable key={question.key} index={index} draggableId={question.key?.toString()}>\r\n                                        {(provided, snapshot) =>\r\n                                            <DraggableCard\r\n                                                question={question}\r\n                                                form={form}\r\n                                                selectableAnswersLists={props.selectableAnswersLists}\r\n                                                questionaryInputFieldTypes={props.questionaryInputFieldTypes}\r\n                                                selectableAnswers={props.selectableAnswers}\r\n                                                provided={provided}\r\n                                                removeQuestion={() => remove(index)}\r\n                                                snapshot={snapshot}\r\n                                                index={index}\r\n                                            />\r\n                                        }\r\n                                    </Draggable>)\r\n                                }\r\n                                {provided.placeholder}\r\n                            </List>\r\n                        </RootRef>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div>\r\n                <IconButton \r\n                    onClick={handleNewQuestion} \r\n                    color=\"primary\" \r\n                    aria-label=\"add\" \r\n                    className=\"mt-50 mb-50 ml-50\">\r\n                    <Icon>add</Icon> <h6 className=\"mt-2\">Добавить вопрос</h6>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n    Array.from({length: count}, (v, k) => k).map(k => ({\r\n        id: `item-${k}`,\r\n        primary: `item ${k}`,\r\n        secondary: k % 2 === 0 ? `Whatever for ${k}` : undefined\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n\r\n    ...(isDragging && {\r\n        background: \"rgb(235,235,235)\"\r\n    })\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    //background: isDraggingOver ? 'lightblue' : 'lightgrey'\r\n});"],"file":"DraggableComponent.js"}