{"version":3,"sources":["../../../ReactApp/src/FormDialogObjectType.tsx"],"names":["FormDialogObjectType","props","dialogForm","useForm","register","handleSubmit","control","reset","errors","onSubmit","data","response","fetch","method","headers","credentials","body","JSON","stringify","newObjectType","json","setObjectTypes","selectOptionsTypes","setOpen","ok","setOpenAlertGreen","setOpenAlertRed","open","React","useState","handleClickOpen","handleClose","objectProperties","remove","append","fields","useFieldArray","name","companyId","type","message","value","selectOptions","selectedValue","setSelectedValue","TextField","required","maxLength","validate","map","property","index","key","Math","random","isUsedInReport","nameInReport"],"mappings":"AAAA,SAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AACjC,QAAMC,UAAU,GAAGC,OAAO,EAA1B;AACA,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,KAAlC;AAAyCC,IAAAA;AAAzC,MAAmDN,UAAzD;;AAEA,QAAMO,QAAQ,GAAG,MAAMC,IAAN,IAAc;AAC3B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAD,EAAuB;AAC/CC,MAAAA,MAAM,EAAE,MADuC;AAE/CC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAFsC;AAG/CC,MAAAA,WAAW,EAAE,SAHkC;AAI/CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AAJyC,KAAvB,CAA5B;AAOA,UAAMS,aAAa,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA5B;AAEAnB,IAAAA,KAAK,CAACoB,cAAN,CAAqB,CAACF,aAAD,EAAgB,GAAGlB,KAAK,CAACqB,kBAAzB,CAArB;AACAf,IAAAA,KAAK;AACLgB,IAAAA,OAAO,CAAC,KAAD,CAAP;;AAEA,QAAIZ,QAAQ,CAACa,EAAb,EAAiB;AACbvB,MAAAA,KAAK,CAACwB,iBAAN,CAAwB,IAAxB;AACH,KAFD,MAEO;AACHxB,MAAAA,KAAK,CAACyB,eAAN,CAAsB,IAAtB;AACH;AACJ,GAnBD;;AAoBA,QAAM,CAACC,IAAD,EAAOJ,OAAP,IAAkBK,KAAK,CAACC,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC1BP,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFD;;AAIA,QAAMQ,WAAW,GAAG,MAAM;AACtBR,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAhB,IAAAA,KAAK;AACR,GAHD;;AAIA,QAAMyB,gBAAgB,GAAI,kBAA1B;AAEA,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA2BC,aAAa,CAAC;AAAC9B,IAAAA,OAAO,EAAEJ,UAAU,CAACI,OAArB;AAA8B+B,IAAAA,IAAI,EAAEL;AAApC,GAAD,CAA9C;AAEA,sBACI,8CACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,UAAhB;AAA2B,IAAA,KAAK,EAAC,SAAjC;AAA2C,IAAA,OAAO,EAAEF,eAApD;AAAqE,IAAA,SAAS,EAAC;AAA/E,+IADJ,eAII,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAE,IAAnB;AAAyB,IAAA,QAAQ,EAAE,IAAnC;AAAyC,IAAA,IAAI,EAAEH,IAA/C;AAAqD,IAAA,OAAO,EAAEI,WAA9D;AACQ,uBAAgB;AADxB,kBAEI,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC;AAAhB,oGAFJ,eAGI;AAAM,IAAA,YAAY,EAAC;AAAnB,kBACI,oBAAC,aAAD,qBACI,8CACI,oBAAC,QAAD;AACI,IAAA,KAAK,EAAEvB,MAAM,EAAE8B,SAAR,EAAmBC,IAD9B;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,QAAQ,EAAE;AAACC,MAAAA,OAAO,EAAE,EAAV;AAAcC,MAAAA,KAAK,EAAE;AAArB,KAHd;AAII,IAAA,IAAI,EAAC,WAJT;AAKI,IAAA,aAAa,EAAExC,KAAK,CAACyC,aALzB;AAMI,IAAA,aAAa,EAAEzC,KAAK,CAAC0C,aANzB;AAOI,IAAA,IAAI,EAAEzC,UAPV;AAQI,IAAA,gBAAgB,EAAED,KAAK,CAAC2C,gBAR5B;AASI,IAAA,UAAU,EAAC;AATf,IADJ,CADJ,eAaI,oBAAC,UAAD;AACI,IAAA,KAAK,EAAEpC,MAAM,EAAE6B,IAAR,EAAcE,IADzB;AAEI,IAAA,EAAE,EAAEM,SAFR;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,OAAO,EAAEvC,OAJb;AAKI,IAAA,YAAY,EAAC,EALjB;AAMI,IAAA,QAAQ,MANZ;AAOI,IAAA,MAAM,EAAC,OAPX;AAQI,IAAA,EAAE,EAAC,mBARP;AASI,IAAA,KAAK,EAAC,sHATV;AAUI,IAAA,SAAS,EAAE,IAVf;AAWI,IAAA,KAAK,EAAE;AAACwC,MAAAA,QAAQ,EAAE,IAAX;AAAiBC,MAAAA,SAAS,EAAE;AAACP,QAAAA,OAAO,EAAC,2BAAT;AAAsCC,QAAAA,KAAK,EAAC;AAA5C,OAA5B;AAA8EO,MAAAA,QAAQ,EAAE;AAAxF,KAXX;AAYI,IAAA,UAAU,EAAExC,MAAM,EAAE6B,IAAR,EAAcG;AAZ9B,IAbJ,eA4BI,iCACKL,MAAM,CAACc,GAAP,CAAW,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC7B,wBACI,oBAAC,QAAD;AACI,MAAA,MAAM,EAAE,MAAMlB,MAAM,CAACkB,KAAD,CADxB;AAEI,MAAA,GAAG,EAAED,QAAQ,CAACE,GAFlB;AAGI,MAAA,KAAK,EAAED,KAHX;AAII,MAAA,IAAI,EAAEjD,UAJV;AAKI,MAAA,YAAY,EAAEE;AALlB,MADJ;AAQH,GATA,CADL,CA5BJ,eAyCI,8CACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,kBAAW,KAAvC;AAA6C,IAAA,OAAO,EAAE,MAAM8B,MAAM,CAAC;AAC/DkB,MAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAD0D;AAE/DjB,MAAAA,IAAI,EAAE,EAFyD;AAG/DkB,MAAAA,cAAc,EAAE,KAH+C;AAI/DC,MAAAA,YAAY,EAAE;AAJiD,KAAD;AAAlE,kBAOI,oBAAC,IAAD,cAPJ,oBAOqB;AAAI,IAAA,SAAS,EAAC;AAAd,yGAPrB,CADJ,CAzCJ,CADJ,eAsDI,oBAAC,aAAD,qBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEzB,WAAjB;AAA8B,IAAA,KAAK,EAAC;AAApC,4CADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE1B,YAAY,CAACI,QAAD,CAA7B;AAAyC,IAAA,KAAK,EAAC;AAA/C,wDALJ,CAtDJ,CAHJ,CAJJ,CADJ;AA2EH","sourcesContent":["function FormDialogObjectType(props) {\r\n    const dialogForm = useForm();\r\n    const {register, handleSubmit, control, reset, errors} = dialogForm;\r\n\r\n    const onSubmit = async data => {\r\n        const response = await fetch(\"/api/ObjectTypeApi\", {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            credentials: \"include\",\r\n            body: JSON.stringify(data)\r\n        })\r\n        \r\n        const newObjectType = await response.json();\r\n\r\n        props.setObjectTypes([newObjectType, ...props.selectOptionsTypes]);\r\n        reset();\r\n        setOpen(false);\r\n        \r\n        if (response.ok) { \r\n            props.setOpenAlertGreen(true);\r\n        } else {\r\n            props.setOpenAlertRed(true);\r\n        }\r\n    };\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset();\r\n    };\r\n    const objectProperties = `objectProperties`;\r\n\r\n    const {remove, append, fields} = useFieldArray({control: dialogForm.control, name: objectProperties});\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} className=\"mt-3 mb-2\">\r\n                Создать новый тип объекта\r\n            </Button>\r\n            <Dialog fullWidth={true} maxWidth={'lg'} open={open} onClose={handleClose}\r\n                    aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Новый тип объекта</DialogTitle>\r\n                <form autoComplete=\"off\">\r\n                    <DialogContent>\r\n                        <div>\r\n                            <MySelect\r\n                                error={errors?.companyId?.type}\r\n                                autoFocus\r\n                                required={{message: '', value: true}}\r\n                                name=\"companyId\" \r\n                                selectOptions={props.selectOptions}\r\n                                selectedValue={props.selectedValue}\r\n                                form={dialogForm}\r\n                                setSelectedValue={props.setSelectedValue}\r\n                                nameSwlect=\"Выберите компанию\"/>\r\n                        </div>\r\n                        <Controller\r\n                            error={errors?.name?.type}\r\n                            as={TextField}\r\n                            name=\"name\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            required\r\n                            margin=\"dense\"\r\n                            id=\"standard-required\"\r\n                            label=\"Название типа объекта\"\r\n                            fullWidth={true}\r\n                            rules={{required: true, maxLength: {message:'Максимально символов: 250', value:250}, validate: true}}\r\n                            helperText={errors?.name?.message}\r\n                        />\r\n\r\n                        <div>\r\n                            {fields.map((property, index) => {\r\n                                return (\r\n                                    <CardProp\r\n                                        remove={() => remove(index)}\r\n                                        key={property.key}\r\n                                        index={index}\r\n                                        form={dialogForm}\r\n                                        registerForm={register}/>\r\n                                ); \r\n                            })}\r\n                        </div> \r\n\r\n                        <div>\r\n                            <IconButton color=\"primary\" aria-label=\"add\" onClick={() => append({\r\n                                key: Math.random(),\r\n                                name: '',\r\n                                isUsedInReport: false,\r\n                                nameInReport: ''\r\n                            })\r\n                            }>\r\n                                <Icon>add</Icon> <h6 className=\"mt-2 font-weight-light\">Добавить свойство</h6>\r\n                            </IconButton>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Отмена\r\n                        </Button>\r\n\r\n                        <Button onClick={handleSubmit(onSubmit)} color=\"primary\">\r\n                            Добавить\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}"],"file":"FormDialogObjectType.js"}