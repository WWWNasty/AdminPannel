{"version":3,"sources":["../../../ReactApp/src/DraggableCard.tsx"],"names":["DraggableCard","props","form","useFormContext","register","control","useStyles","makeStyles","theme","createStyles","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","classes","selectedSelectableAnswersListId","watch","index","availableSelectableAnswers","selectableAnswers","filter","answer","selectableAnswersListId","availableQuestionaryInputFieldTypeses","questionaryInputFieldTypes","input","ref","provided","innerRef","draggableProps","dragHandleProps","getItemStyle","snapshot","isDragging","style","TextField","question","questionText","canSkipQuestion","selectableAnswersLists","map","item","name","id","removeQuestion"],"mappings":"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","sourcesContent":["interface QuestionaryInputFieldTypes extends SelectOption {\r\n    selectableAnswersListId: number;\r\n}\r\ninterface SelectableAnswers {\r\n    id: number;\r\n    name: string;\r\n    selectableAnswersListId: number;\r\n}\r\nconst DraggableCard = (props) =>{\r\n    const form = useFormContext();\r\n    const {register, control} = useFormContext();\r\n    const useStyles = makeStyles((theme: any) =>\r\n        createStyles({\r\n            root: {\r\n                width: '77%',\r\n            },\r\n            heading: {\r\n                fontSize: theme.typography.pxToRem(15),\r\n                fontWeight: theme.typography.fontWeightRegular,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n    const selectedSelectableAnswersListId = form.watch(`questionaryQuestions[${props.index}].selectableAnswersListId`);\r\n    const availableSelectableAnswers = props.selectableAnswers.filter(answer => answer.selectableAnswersListId == selectedSelectableAnswersListId);\r\n    const availableQuestionaryInputFieldTypeses = props.questionaryInputFieldTypes.filter(input => input.selectableAnswersListId == selectedSelectableAnswersListId);\r\n    return (\r\n        <div className=\"mt-3 bg-light\">\r\n            <ListItem\r\n                ContainerComponent=\"li\"\r\n                ContainerProps={{ ref: props.provided.innerRef }}\r\n                {...props.provided.draggableProps}\r\n                {...props.provided.dragHandleProps}\r\n                style={getItemStyle(\r\n                    props.snapshot.isDragging,\r\n                    props.provided.draggableProps.style\r\n                )}\r\n            >\r\n                <ListItemIcon>\r\n                    <Icon>help</Icon>\r\n                </ListItemIcon>\r\n                <div className='col'>\r\n                    <div className='row'>\r\n                        <ListItemText\r\n                            primary= \"Вопрос\"\r\n                        />\r\n                    </div>\r\n                    <div className='row'>\r\n                        <Controller\r\n                            as={TextField}\r\n                            name={`questionaryQuestions[${props.index}].questionText`}\r\n                            className=\"mr-3 col-md-9\"\r\n                            defaultValue={props.question.questionText}\r\n                            required\r\n                            control={control}\r\n                            label=\"Текст вопроса\"\r\n                        />\r\n                        {/*TODO fix state*/}\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    className=\"ml-5\"\r\n                                    name={`questionaryQuestions[${props.index}].canSkipQuestion`}\r\n                                    color=\"primary\"\r\n                                    inputRef={register}\r\n                                    defaultValue={props.question.canSkipQuestion}\r\n                                />\r\n                            } \r\n                            \r\n                            label=\"Обязательный вопрос\"\r\n                        />\r\n                        <MySelect required\r\n                                  name={`questionaryQuestions[${props.index}].selectableAnswersListId`}\r\n                                  selectOptions={props.selectableAnswersLists}\r\n                                  nameSwlect=\"Варианты ответа\"\r\n                        />\r\n                        <MySelect required\r\n                                  name={`questionaryQuestions[${props.index}].questionaryInputFieldTypeId`}\r\n                                  selectOptions={availableQuestionaryInputFieldTypeses}\r\n                                  nameSwlect=\"Тип ввода\"\r\n                        />\r\n                        <MySelect name={`questionaryQuestions[${props.index}].defaultAnswerId`}\r\n                                  selectOptions={availableSelectableAnswers}\r\n                                  nameSwlect=\"Ответ по умолчанию\"\r\n                        /> \r\n                        <input type=\"hidden\"\r\n                               ref={register}\r\n                               name={`questionaryQuestions[${props.index}].sequenceOrder`}\r\n                               value={props.index}\r\n                        />\r\n                    </div>\r\n                    <div className={`${classes.root} mt-3`}>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                                expandIcon={<Icon>expand_more</Icon>}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\"\r\n                            >\r\n                                <Typography className={classes.heading}>Ответы</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <Typography>\r\n                                    Выберите ниже ответы, которым необходим комментарий\r\n                                    <FormGroup>\r\n                                        {availableSelectableAnswers?.map((item, index) =>\r\n                                            <div>\r\n\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Checkbox\r\n                                                            name={`questionaryQuestions[${props.index}].questionaryAnswerOptions[${index}].isInvolvesComment`}\r\n                                                            color=\"primary\"\r\n                                                            inputRef={register}\r\n                                                            defaultValue=\"\"\r\n                                                        />\r\n                                                    }\r\n                                                    label={item.name}\r\n                                                />\r\n                                                <input type=\"hidden\"\r\n                                                       ref={register}\r\n                                                       name={`questionaryQuestions[${props.index}].questionaryAnswerOptions[${index}].selectableAnswerId`}\r\n                                                       value={item.id}\r\n                                                />\r\n                                            </div>\r\n                                        )}\r\n                                      \r\n                                    </FormGroup>\r\n                                </Typography>\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    </div> \r\n                </div>\r\n              \r\n                <ListItemSecondaryAction>\r\n                    <IconButton onClick={() => props.removeQuestion(props.index)}>\r\n                        <Icon>delete</Icon>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}"],"file":"DraggableCard.js"}