{"version":3,"sources":["../../../ReactApp/src/DraggableCard.tsx"],"names":["DraggableCard","props","form","useFormContext","register","control","errors","useStyles","makeStyles","theme","createStyles","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","classes","selectedSelectableAnswersListId","watch","index","availableSelectableAnswers","selectableAnswers","filter","answer","selectableAnswersListId","availableQuestionaryInputFieldTypeses","questionaryInputFieldTypes","input","onChange","setValue","console","log","ref","provided","innerRef","draggableProps","dragHandleProps","getItemStyle","snapshot","isDragging","style","questionaryQuestions","questionText","type","TextField","question","required","maxLength","message","value","validate","Log","selectableAnswersLists","questionaryInputFieldTypeId","color","map","item","e","target","checked","name","id","removeQuestion"],"mappings":"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","sourcesContent":["interface QuestionaryInputFieldTypes extends SelectOption {\r\n    selectableAnswersListId: number;\r\n}\r\n\r\ninterface SelectableAnswers {\r\n    id: number;\r\n    name: string;\r\n    selectableAnswersListId: number;\r\n}\r\n\r\nconst DraggableCard = (props) => {\r\n    const form = useFormContext();\r\n    const {register, control, errors} = form;\r\n    const useStyles = makeStyles((theme: any) =>\r\n        createStyles({\r\n            root: {\r\n                width: '77%',\r\n            },\r\n            heading: {\r\n                fontSize: theme.typography.pxToRem(15),\r\n                fontWeight: theme.typography.fontWeightRegular,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n    const selectedSelectableAnswersListId = form.watch(`questionaryQuestions[${props.index}].selectableAnswersListId`);\r\n    const availableSelectableAnswers = props.selectableAnswers.filter(answer => answer.selectableAnswersListId == selectedSelectableAnswersListId);\r\n    const availableQuestionaryInputFieldTypeses = props.questionaryInputFieldTypes.filter(input => input.selectableAnswersListId == selectedSelectableAnswersListId);\r\n    const onChange = () => {\r\n        form.setValue(`questionaryQuestions[${props.index}].questionaryInputFieldTypeId`, null)\r\n        form.setValue(`questionaryQuestions[${props.index}].defaultAnswerId`, null)\r\n    };\r\n    console.log(errors);\r\n    return (\r\n        <div className=\"mt-3 bg-light\">\r\n            <ListItem\r\n                ContainerComponent=\"li\"\r\n                ContainerProps={{ref: props.provided.innerRef}}\r\n                {...props.provided.draggableProps}\r\n                {...props.provided.dragHandleProps}\r\n                style={getItemStyle(\r\n                    props.snapshot.isDragging,\r\n                    props.provided.draggableProps.style\r\n                )}\r\n            >\r\n                <ListItemIcon>\r\n                    <Icon>help</Icon>\r\n                </ListItemIcon>\r\n                <div className='col'>\r\n                    <div className='row'>\r\n                        <ListItemText\r\n                            primary=\"Вопрос\"\r\n                        />\r\n                    </div>\r\n                    <div className='row'>\r\n                        <Controller\r\n                            error={errors?.questionaryQuestions?.[props.index]?.questionText?.type}\r\n                            as={TextField}\r\n                            name={`questionaryQuestions[${props.index}].questionText`}\r\n                            className=\"mr-3 col-md-9\"\r\n                            defaultValue={props.question.questionText}\r\n                            required\r\n                            id=\"standard-required\"\r\n                            control={control}\r\n                            label=\"Текст вопроса\"\r\n                            rules={{required: true, maxLength: {message:'Максимально символов: 250', value:250}, validate: true}}\r\n                            helperText={Log(errors?.questionaryQuestions?.[props.index]?.questionText?.message)}\r\n                        />\r\n                        {/*TODO fix state*/}\r\n\r\n                        <FormSwitch\r\n                            name={`questionaryQuestions[${props.index}].canSkipQuestion`}\r\n                            control={control}\r\n                            label={\"Обязательный вопрос\"}\r\n                        />\r\n                        <MySelect required={ {message: '', value: true} }\r\n                                  onChange={onChange}\r\n                                  error={Log(errors?.questionaryQuestions?.[props.index]?.selectableAnswersListId?.type)}\r\n                                  name={`questionaryQuestions[${props.index}].selectableAnswersListId`}\r\n                                  selectOptions={props.selectableAnswersLists}\r\n                                  nameSwlect=\"Варианты ответа\"\r\n                        />\r\n                        <MySelect required={ {message: '', value: true} }\r\n                                  errorMessage={Log(errors?.questionaryQuestions?.[props.index]?.questionaryInputFieldTypeId?.message)}\r\n                                  error={errors?.questionaryQuestions?.[props.index]?.questionaryInputFieldTypeId?.type}\r\n                                  name={`questionaryQuestions[${props.index}].questionaryInputFieldTypeId`}\r\n                                  selectOptions={availableQuestionaryInputFieldTypeses}\r\n                                  nameSwlect=\"Тип ввода\"\r\n                        />\r\n                        <MySelect\r\n                            //error={errors?.questionaryQuestions?.[props.index]?.defaultAnswerId?.type}\r\n                            name={`questionaryQuestions[${props.index}].defaultAnswerId`}\r\n                            selectOptions={availableSelectableAnswers}\r\n                            nameSwlect=\"Ответ по умолчанию\"\r\n                        />\r\n\r\n                    </div>\r\n                    <div className={`${classes.root} mt-3`}>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                                expandIcon={<Icon>expand_more</Icon>}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\"\r\n                            >\r\n                                <Typography className={classes.heading}>Ответы</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <Typography>\r\n                                    <h6 className=\"font-weight-light\" style={{color: '#3f51b5'}} >Выберите ниже ответы, которым необходим комментарий:</h6>\r\n                                    <FormGroup>\r\n                                        {availableSelectableAnswers?.map((item, index) =>\r\n                                            <div>\r\n\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Controller\r\n                                                            name={`questionaryQuestions[${props.index}].questionaryAnswerOptions[${index}].isInvolvesComment`}\r\n                                                            control={control}\r\n                                                            render={({onChange, value, ...props}) => (\r\n                                                                <Checkbox\r\n                                                                    {...props}\r\n                                                                    checked={value}\r\n                                                                    color=\"primary\"\r\n                                                                    onChange={(e) => onChange(e.target.checked)}\r\n                                                                />\r\n                                                            )}\r\n                                                        />\r\n                                                    }\r\n                                                    label={item.name}\r\n                                                />\r\n\r\n                                                <input type=\"hidden\"\r\n                                                       ref={register}\r\n                                                       name={`questionaryQuestions[${props.index}].questionaryAnswerOptions[${index}].selectableAnswerId`}\r\n                                                       value={item.id}\r\n                                                />\r\n                                            </div>\r\n                                        )}\r\n\r\n                                    </FormGroup>\r\n                                </Typography>\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    </div>\r\n                </div>\r\n\r\n                <ListItemSecondaryAction>\r\n                    <IconButton onClick={() => props.removeQuestion(props.index)}>\r\n                        <Icon>delete</Icon>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}"],"file":"DraggableCard.js"}