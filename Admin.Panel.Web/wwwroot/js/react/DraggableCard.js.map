{"version":3,"sources":["../../../ReactApp/src/DraggableCard.tsx"],"names":["DraggableCard","props","form","useFormContext","state","setState","React","useState","checked","gilad","jason","antoine","register","control","handleChange","event","target","name","removeFriend","index","setIndexes","prevIndexes","filter","item","setCounter","prevCounter","useStyles","makeStyles","theme","createStyles","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","classes","selectedSelectableAnswersListId","watch","availableSelectableAnswers","selectableAnswers","answer","selectableAnswersListId","console","log","availableQuestionaryInputFieldTypeses","questionaryInputFieldTypes","input","ref","provided","innerRef","draggableProps","dragHandleProps","getItemStyle","snapshot","isDragging","style","TextField","selectableAnswersLists","map","id"],"mappings":"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","sourcesContent":["interface QuestionaryInputFieldTypes extends SelectOption {\r\n    selectableAnswersListId: number;\r\n}\r\ninterface SelectableAnswers {\r\n    id: number;\r\n    name: string;\r\n    selectableAnswersListId: number;\r\n}\r\nconst DraggableCard = (props) =>{\r\n    const form = useFormContext();\r\n    const [state, setState] = React.useState({\r\n        checked: true,\r\n        gilad: true,\r\n        jason: false,\r\n        antoine: false,\r\n    });\r\n    const {register, control} = useFormContext();\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n    const removeFriend = index => () => {\r\n        props.setIndexes(prevIndexes => [...prevIndexes.filter(item => item !== index)]);\r\n        props.setCounter(prevCounter => prevCounter - 1);\r\n    };\r\n    const useStyles = makeStyles((theme: any) =>\r\n        createStyles({\r\n            root: {\r\n                width: '80%',\r\n            },\r\n            heading: {\r\n                fontSize: theme.typography.pxToRem(15),\r\n                fontWeight: theme.typography.fontWeightRegular,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n    const { gilad, jason, antoine } = state;\r\n    const selectedSelectableAnswersListId = form.watch(`questionaryQuestions[${props.index}].selectableAnswersListId`);\r\n    const availableSelectableAnswers = props.selectableAnswers.filter(answer => answer.selectableAnswersListId == selectedSelectableAnswersListId);\r\n    console.log(\"ответы1\" + availableSelectableAnswers);\r\n    const availableQuestionaryInputFieldTypeses = props.questionaryInputFieldTypes.filter(input => input.selectableAnswersListId == selectedSelectableAnswersListId);\r\n    return(\r\n        <div className=\"mt-3 bg-light\">\r\n            <ListItem\r\n                ContainerComponent=\"li\"\r\n                ContainerProps={{ ref: props.provided.innerRef }}\r\n                {...props.provided.draggableProps}\r\n                {...props.provided.dragHandleProps}\r\n                style={getItemStyle(\r\n                    props.snapshot.isDragging,\r\n                    props.provided.draggableProps.style\r\n                )}\r\n            >\r\n                <ListItemIcon>\r\n                    <Icon>help</Icon>\r\n                </ListItemIcon>\r\n                <div className='col'>\r\n                    <div className='row'>\r\n                        <ListItemText\r\n                            primary= \"Вопрос\"\r\n                        />\r\n                    </div>\r\n                    <div className='row'>\r\n                        <Controller\r\n                            as={TextField}\r\n                            name={`questionaryQuestions[${props.index}].questionText`}\r\n                            className=\"mr-3 col-md-6\"\r\n                            defaultValue=\"\"\r\n                            required\r\n                            control={control}\r\n                            label=\"Текст вопроса\"\r\n                        />\r\n                        <MySelect required\r\n                                  name={`questionaryQuestions[${props.index}].selectableAnswersListId`}\r\n                                  selectOptions={props.selectableAnswersLists}\r\n                                  nameSwlect=\"Варианты ответа\"\r\n                        />\r\n                        <MySelect required\r\n                                  name={`questionaryQuestions[${props.index}].questionaryInputFieldTypeId`}\r\n                                  selectOptions={availableQuestionaryInputFieldTypeses}\r\n                                  nameSwlect=\"Тип ввода\"\r\n                        />\r\n                        <MySelect name={`questionaryQuestions[${props.index}].selectableAnswersListId`}\r\n                                  selectOptions={availableSelectableAnswers}\r\n                                  nameSwlect=\"Ответ по умолчанию\"\r\n                        />\r\n                        <input type=\"hidden\"\r\n                               ref={register}\r\n                               name={`questionaryQuestions[${props.index}].sequenceOrder`}\r\n                               value={props.index}\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    className=\"mr-3\"\r\n                                    name={`questionaryQuestions[${props.index}].canSkipQuestion`}\r\n                                    color=\"primary\"\r\n                                    inputRef={register}\r\n                                />\r\n                            }\r\n                            label=\"Обязательный вопрос\"\r\n                        />\r\n                        \r\n                    </div>\r\n                    <div className={`${classes.root} mt-3`}>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                                expandIcon={<Icon>expand_more</Icon>}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\"\r\n                            >\r\n                                <Typography className={classes.heading}>Ответы</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <Typography>\r\n                                    Выберите ниже ответы которым необходим комментарий\r\n                                    <FormGroup>\r\n                                        {availableSelectableAnswers?.map((item, index) =>\r\n                                            <div>\r\n                                                {/*<FormControlLabel*/}\r\n                                                {/*    control={<Checkbox checked={gilad} onChange={handleChange} color=\"primary\" name=\"gilad\" />}*/}\r\n                                                {/*    label=\"Gilad Gray\"*/}\r\n                                                {/*/>*/}\r\n\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Checkbox\r\n                                                            name={`questionaryQuestions[${props.index}].questionaryAnswerOptions[${index}].isInvolvesComment`}\r\n                                                            color=\"primary\"\r\n                                                            inputRef={register}\r\n                                                        />\r\n                                                    }\r\n                                                    label={item.name}\r\n                                                />\r\n                                                <input type=\"hidden\"\r\n                                                       ref={register}\r\n                                                       name={`questionaryQuestions[${props.index}].questionaryAnswerOptions[${index}].selectableAnswerId`}\r\n                                                       value={item.id}\r\n                                                />\r\n                                                {/*<FormControlLabel*/}\r\n                                                {/*    color=\"primary\"*/}\r\n                                                {/*    value={item.id}*/}\r\n                                                {/*    control={<Checkbox />}*/}\r\n                                                {/*    label={item.name}*/}\r\n                                                {/*    name={`techStack[${item.id}]`}*/}\r\n                                                {/*    inputRef={register}*/}\r\n                                                {/*/>*/}\r\n                                                \r\n                                                {/*<Controller*/}\r\n                                                {/*    as={Checkbox}*/}\r\n                                                {/*    name={`techStack[${item.id}]`}*/}\r\n                                                {/*    control={control}*/}\r\n                                                {/*    defaultValue=\"\"*/}\r\n                                                {/*    label={item.name}*/}\r\n                                                {/*    color=\"primary\"*/}\r\n                                                {/*/>*/}\r\n                                                \r\n                                                {/*<Controller*/}\r\n                                                {/*    as={TextField}*/}\r\n                                                {/*    name={`selectedObjectPropertyValues[${index}].value`}*/}\r\n                                                {/*    control={control}*/}\r\n                                                {/*    defaultValue=\"\"*/}\r\n                                                {/*    required*/}\r\n                                                {/*    margin=\"dense\"*/}\r\n                                                {/*    id=\"standard-required\"*/}\r\n                                                {/*    label={item.name}*/}\r\n                                                {/*    fullWidth={true}*/}\r\n                                                {/*/>*/}\r\n                                                {/*<input type=\"hidden\"*/}\r\n                                                {/*       ref={register}*/}\r\n                                                {/*       name={`selectedObjectPropertyValues[${index}].objectPropertyId`}*/}\r\n                                                {/*       value={item.id}*/}\r\n                                                {/*/>*/}\r\n                                            </div>\r\n                                        )}\r\n                                      \r\n                                    </FormGroup>\r\n                                </Typography>\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    </div> \r\n                </div>\r\n              \r\n                <ListItemSecondaryAction>\r\n                    <IconButton onClick={removeFriend(props.index)}>\r\n                        <Icon>delete</Icon>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </div>\r\n    );\r\n}"],"file":"DraggableCard.js"}