{"version":3,"sources":["../../../ReactApp/src/DruggableComponent.tsx"],"names":["DruggableComponent","items","setItems","useState","React","useEffect","getItems","onDragEnd","result","destination","reorderedItems","reorder","source","index","provided","snapshot","innerRef","getListStyle","isDraggingOver","map","item","id","ref","draggableProps","dragHandleProps","getItemStyle","isDragging","style","primary","secondary","placeholder","count","Array","from","length","v","k","undefined","list","startIndex","endIndex","removed","splice","draggableStyle","background"],"mappings":"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","sourcesContent":["const DruggableComponent = () =>{\r\n    const [items, setItems] = useState([]);\r\n\r\n    React.useEffect(() => {\r\n        setItems(getItems(10))\r\n    },[])\r\n\r\n    const onDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        const reorderedItems = reorder(\r\n            items,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n\r\n        setItems(reorderedItems);\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {(provided, snapshot) => (\r\n                    <RootRef rootRef={provided.innerRef}>\r\n                        <List style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {items.map((item, index) => (\r\n                                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <ListItem\r\n                                            ContainerComponent=\"li\"\r\n                                            ContainerProps={{ ref: provided.innerRef }}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}\r\n                                        >\r\n                                            <ListItemIcon>\r\n                                                <Icon>inbox</Icon>\r\n                                                {/*<InboxIcon />*/}\r\n                                            </ListItemIcon>\r\n                                            <ListItemText\r\n                                                primary={item.primary}\r\n                                                secondary={item.secondary}\r\n                                            />\r\n                                            <ListItemSecondaryAction>\r\n                                                <IconButton>\r\n                                                    <Icon>edit</Icon>\r\n                                                    {/*<EditIcon />*/}\r\n                                                </IconButton>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </List>\r\n                    </RootRef>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    );\r\n}\r\n\r\n\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k}`,\r\n        primary: `item ${k}`,\r\n        secondary: k % 2 === 0 ? `Whatever for ${k}` : undefined\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n\r\n    ...(isDragging && {\r\n        background: \"rgb(235,235,235)\"\r\n    })\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    //background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n});\r\n"],"file":"DruggableComponent.js"}